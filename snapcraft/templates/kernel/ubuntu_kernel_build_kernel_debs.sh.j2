# Ubuntu kernel snapcraft build script
# Generated by snapcraft ubuntu-kernel plugin.
# ----
# Build on:  {{ craft_arch_build_on }}
# Build for: {{ craft_arch_build_for }}
# Snapcraft version: {{ snap_version }}
# Snap data path: {{ snap_data_path }}
# Snap context: {{ snap_context }}
# ----
# TODO(esh) remove; handy for debug, --debug and --shell has a different env
# Ignore SC1091 "Not following: x/y/z.sh was not specified as input"
shellcheck -e SC1091 "$0"
env
{% if is_cross_compiling %}
export ARCH={{ target_arch }}
export CROSS_COMPILE={{ craft_arch_triplet_build_for }}-
{% endif %}

rsync -aH {{ craft_part_src_dir }}/ {{ craft_part_build_dir }}/kernel-src

cd {{ craft_part_build_dir }}/kernel-src

. debian/debian.env

{% if is_cross_compiling %}
    export "$(dpkg-architecture -a{{ target_arch }})"
{% endif %}

{% if ubuntu_kernel_tools|length > 0 %}
    echo "Adding kernel tools selection"
    sed -i 's/^\\s*do_tools_\\(.*\\)\\s*=.*/do_tools_\\1 = false/g'
    debian.master/rules.d/{{ target_arch }}.mk
    {% for tool in ubuntu_kernel_tools %}
    sed -i \
        's/^\s*do_tools_{{ tool }}\s*=.*/do_tools_{{ tool }} = true/g' \
        debian.master/rules.d/{{ target_arch }}.mk
    {% endfor %}
{% endif %}


{% if has_ubuntu_kernel_image_target %}
    target_image={{ ubuntu_kernel_image_target }}
    sed -i \
        's/build_image.*/build_image = $target_image/g' \
        debian.master/rules.d/{{ target_arch }}.mk
    sed -i \
        's|kernel_file.*|kernel_file = arch/$(build_arch)/boot/$target_image|g' \
        debian.master/rules.d/{{ target_arch }}.mk
{% endif %}

{% if has_ubuntu_kernel_config_fragments %}
{
    echo "# Ubuntu kernel configuration fragment."
    echo "# Generated by snapcraft ubuntu-kernel plugin."
    echo "# ----"
    echo "# Kernel version: {{ kernel_version }}"
    echo "# Build on: {{ craft_arch_build_on }}"
    echo "# Build for: {{ craft_arch_build_for }}"
    echo "# Build triplet: {{ craft_arch_triplet_build_for }}"
    echo "# Snap version: {{ snap_version }}"
    echo "# Snap data path: {{ snap_data_path }}"
    echo "# Snap context: {{ snap_context }}"
    echo "# ----"
    echo ""
    {% for config in ubuntu_kernel_config %}
        echo "{{ config }}"
    {%  endfor %}
} > {{ craft_project_dir }}/custom_config_fragment
    ./debian/scripts/misc/annotations \
       --arch {{ target_arch }} \
       --flavour {{ ubuntu_kernel_flavour }} \
       --update {{ craft_project_dir }}/custom_config_fragment
{% endif %}

{% if has_ubuntu_kernel_defconfig %}
    ./debian/scripts/misc/annotations \
            --arch {{ target_arch }} \
            --flavour {{ ubuntu_kernel_flavour }} \
            --import {{ craft_project_dir }}/{{ ubuntu_kernel_defconfig }}
{% endif %}

{% for dkms in ubuntu_kernel_dkms %}
    # The details required for a dkms entry in dkms-versions are available from
    # the dkms deb package
    apt show {{ dkms }} > pkginfo
    source=$(grep "Source:" pkginfo | sed 's/Source: \(.*\)$/\1/g')
    version=$(grep "Version:" pkginfo | sed 's/Version: \(.*\)$/\1/g')
    repo=$(grep "Section:" pkginfo | sed 's/Section: \(.*\)\/.*$/\1/g')
    {% set tokens = dkms.split('-') %}
    echo "${source} ${version} " \
        "modulename=${source} " \
        "debpath=pool/${repo}/{{ dkms[0] }}/%package%/{{ dkms }}_%version%_all.deb arch={{ target_arch }} " \
        "rprovides={{ tokens[0] }}-modules " \
        "rprovides={{ dkms }}" >> debian.master/dkms-versions
{% endfor %}

fakeroot debian/rules clean
# This fails due to a change in the config, which is expected
fakeroot debian/rules updateconfigs || true
fakeroot debian/rules printenv

fakeroot debian/rules build-{{ ubuntu_kernel_flavour }}
fakeroot debian/rules binary-{{ ubuntu_kernel_flavour }}
fakeroot debian/rules binary-headers

cd {{ craft_part_build_dir }}
